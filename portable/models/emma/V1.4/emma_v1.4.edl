PROJECT (
PREAMBLE (
	NAME "EMMA_V1.4"
	AUTHOR "Roland Ibbett"
	VERSION 1
	DESCRIPTION "Edinburgh Microcoded Microprocessor"
)

PARAMLIB (
-- definition of error description word array
	ARRAY (string_array, String);

-- DEFINITION OF INSTRUCTION STRUCTURES

-- load/store  instruction group (I-type)
-- these are variants of the DLX I-type designed to allow the decoder to deal
-- with brackets in the assembly code instructions
	STRUCT (t_load, [RSTRING (dest_reg, "-",  5), RSTRING (src, "-", 30)]);
	STRUCT (t_store, [RSTRING (dest, "-", 30), RSTRING (src_reg, "-", 5)]);

-- load/store immediate (I-type)
-- these are variants of the DLX I-type designed to allow the decoder to deal
-- with the absence of an rs1 specifier in the assembly code instructions
	STRUCT (t_loadi, [RSTRING (dest_reg, "-", 5), RINT (immediate, 0)]);
	STRUCT (t_storei, [RINT (immediate, 0), RSTRING (src_reg, "-", 5)]);

-- ALU (integer and floating-point) instruction group (R-type)
	STRUCT (t_alu,  [RSTRING (dest_reg, "-"),
			 RSTRING (src_reg1, "-"),
			 RSTRING (src_reg2, "-")]);

-- ALUI instruction group (I-type)
	STRUCT (t_alui,  [RSTRING (dest_reg, "-"),
			 RSTRING (src_reg1, "-"),
			 RINT (immediate, 0)]);

-- Definition of instruction set
	INSTR (t_uproc_instrn_set, [(JUMP, RINT (immediate,  0)),
			(JREG, RSTRING (src_reg,  "-")),
			(BEQZ, RINT (immediate,  0)),
			(BNEG, RINT (immediate,  0)),
			(LD, RSTRUCT (t_loadi,  loadi_field)),
			(LDL, RSTRUCT (t_loadi, loadi_field)),
			(LDX, RSTRUCT (t_load,  load_field)),
			(ST, RSTRUCT (t_storei, storei_field)),
			(STX, RSTRUCT (t_store, store_field)),
			(ALU(ADD,SUB,AND,OR,XOR,SLL,SRL,SRA), 
			  RSTRUCT (t_alu, alu_field)),
			(ALUL(ADDL,SUBL,ANDL,ORL,XORL,SLLL,SRLL,SRAL),
			  RSTRUCT (t_alui,  alui_field)),
			(STOP) ], function);


-- definition of instruction memory array
	ARRAY (instr_mem_array, t_uproc_instrn_set);

-- definition of data memory array
	ARRAY (data_mem_array, int);

-- definition of control packet
	STRUCT (t_control, [RINSTR(t_uproc_instrn_set, instrn),
			   RINT(microcode, 0)]);

-- definition of microcode memory word
	STRUCT (t_ucode_mem_word, [ RSTRING(label, "0"),
				RINT(microcode, 0x0),
				RINT(address, 0)]);

-- definition of microcode memory array
	ARRAY (microcode_array, t_ucode_mem_word);

-- definition of programmable register
	STRUCT (t_prog_reg, [RINT(reg_value, 0)]);

-- definition of programmable register set
	ARRAY (prog_reg_set, t_prog_reg);

-- definition of instruction/microcode links

	LINK(l_instr,[(INSTRUCTION,RINSTR(t_uproc_instrn_set, instrn))]);

-- definition of microcode link

	LINK(l_code,[(UCODE,RINT(value, 0x0))]);

-- definition of bus link 

	LINK(l_bus,[(RESULT, RINT(value,0))]);

)
	GLOBALS(
	)
	ENTITYLIB (

		ABSTRACT Biclocked sync ( )
		ENTITY Clock sync ( )
		ENTITY Clockphase sync ( )


	ENTITY bus (
		EXTENDS (Biclocked)
		DESCRIPTION ("Bus")
		STATES (BUS_STATE)
		PARAMS ( )
	  	PORTS (
		XPORT(2, input,l_bus,DESTINATION);
		XPORT(2, output,l_bus,SOURCE);
	  )
	);

	ENTITY registers (
		EXTENDS (Biclocked)
		DESCRIPTION ("Registers")
		STATES (R_IDLE, R_READ, R_WRITE)
		PARAMS ( 
			RARRAY ( prog_reg_set, main_reg, 16);
		)
	  	PORTS (
		PORT(control_input,l_code,DESTINATION);
		PORT(input,l_bus,DESTINATION);
		PORT(output1,l_bus,SOURCE);
		PORT(output2,l_bus,SOURCE);
	  )
	);
	ENTITY i_memory (
		EXTENDS (Biclocked)
		DESCRIPTION ("Instruction Memory")
		STATES (I_M_IDLE, I_M_BUSY)
		PARAMS (
			read_only RINT (inst_accesstime, 1)
			RINT (I_Mem_Size, 65536);
			RARRAY ( instr_mem_array, instr_mem, I_Mem_Size);
		)
	  	PORTS (
		PORT(instr_request,l_bus,DESTINATION);
		PORT(instr_out,l_instr,SOURCE);
	  )
	);

	ENTITY d_memory (
		EXTENDS (Biclocked)
		DESCRIPTION ("Data Memory")
		STATES (D_M_IDLE, D_M_READ, D_M_WRITE)
		PARAMS (
			RINT (MAR, 0);
			RINT (MBR, 0);
			static RRANGE (data_accesstime, 1, 8, 1)
			RINT (D_Mem_Size, 65536);
			RARRAY ( data_mem_array, data_mem, D_Mem_Size);
		)
	  	PORTS (
		PORT(data_out,l_bus,SOURCE);
		PORT(data_request,l_bus,DESTINATION);
		PORT(data_in,l_bus,DESTINATION);
		PORT(control_input,l_code,DESTINATION);
	  )
	);

	ENTITY microcode (
		EXTENDS (Biclocked)
		DESCRIPTION ("Microcode memory")
		PARAMS (
			RRANGE (log_max_cycles, 1, 20, 9)
			RARRAY ( microcode_array, memory, 256);
			RINSTR (t_uproc_instrn_set, INSTRUCTION);
			RINT (MEM_ADDRESS, 0);
			RINT (CODEWORD, 0X0);
			RINT (MPC_VALUE, 0);
		)
		PORTS (
		 PORT(instr_in,l_instr,DESTINATION);
		 PORT(to_bus1,l_bus,SOURCE);
		 PORT(to_bus2,l_bus,SOURCE);
		 PORT(to_mpc,l_bus,SOURCE);
		 PORT(from_mpc,l_bus,DESTINATION);
		 PORT(control1,l_code,SOURCE);
		 PORT(control2,l_code,SOURCE);
		 PORT(control3,l_code,SOURCE);
		 PORT(control4,l_code,SOURCE);
		 PORT(control5,l_code,SOURCE);
		 PORT(control6,l_code,SOURCE);
		 PORT(CCinput,l_bus,DESTINATION);
		)
	);
	ENTITY mpx_add_reg (
		EXTENDS (Biclocked)
		DESCRIPTION ("Register with Multiplexer Input and Adder")
		STATES (R_IDLE, R_BUSY)
		PARAMS (
			RINT (Reg_value, 0);
		)
	  PORTS (
		PORT(control_input,l_code,DESTINATION);
		PORT(input1,l_bus,DESTINATION);
		PORT(input2,l_bus,DESTINATION);
		PORT(input3,l_bus,DESTINATION);
	 	PORT(output1,l_bus,SOURCE);
	 	PORT(output2,l_bus,SOURCE);
	  )
	);

	ENTITY plus1 (
		EXTENDS (Biclocked)
		DESCRIPTION ("Source of +1")
		PARAMS ( )
	  PORTS (
	 	PORT(output,l_bus,SOURCE);
	  )
	);

	ENTITY Alu (
		EXTENDS (Biclocked)
		DESCRIPTION("Integer execution unit")
		STATES (ALU_IDLE, ALU_BUSY)
		PARAMS (
			RINT (CC0,0 );
			RINT (CC1,0 );
		)
		PORTS (
		PORT(control_input,l_code,DESTINATION);
		 PORT(input1,l_bus,DESTINATION);
		 PORT(input2,l_bus,DESTINATION);
		 PORT(output1,l_bus,SOURCE);
		 PORT(output2,l_bus,SOURCE);
		 PORT(CCoutput,l_bus,SOURCE);
		)
	);

	)
	STRUCTURE(
-- List of entity instances in top-level model
	
		AENTITY i_memory I_MEMORY (
			DESCRIPTION("Instruction memory")
		);

		AENTITY d_memory D_MEMORY (
			DESCRIPTION("Data memory")
		);

		AENTITY bus BUS1 (
			DESCRIPTION("bus1")
			ATTRIB ( XPORT (input, 3) )
		);

		AENTITY bus BUS2 (
			DESCRIPTION("bus2")
			ATTRIB ( XPORT (input, 3) 
				 XPORT (output, 3) )
		);

		AENTITY registers REGISTERS (
			DESCRIPTION("registers")
		);

		AENTITY mpx_add_reg PC (
			DESCRIPTION("Program Counter")
		);

		AENTITY mpx_add_reg MPC (
			DESCRIPTION("Microprogram Counter")
		);

		AENTITY plus1 PC_plus1 (
			DESCRIPTION("Source of +1 for PC")
		);

		AENTITY plus1 MPC_plus1 (
			DESCRIPTION("Source of +1 for MPC")
		);

		AENTITY microcode MICROCODE (
			DESCRIPTION("Microcode")
		);
		AENTITY Alu ALU (
			DESCRIPTION("ALU")
		);
		AENTITY Clock CLOCK ( DESCRIPTION ("Clock"));
		AENTITY Clockphase CPHASE (DESCRIPTION ("Clock display"));

	CLINK(mpx_add_reg.PC[output1]->mpx_add_reg.PC[input1],2);
	CLINK(mpx_add_reg.PC[output2]->i_memory.I_MEMORY[instr_request],2);
	CLINK(i_memory.I_MEMORY[instr_out]->microcode.MICROCODE[instr_in],2);
	CLINK(d_memory.D_MEMORY[data_out]->bus.BUS1[input0],2);
	CLINK(Alu.ALU[output1]->registers.REGISTERS[input],2);
	CLINK(Alu.ALU[output2]->bus.BUS2[input2],2);
	CLINK(Alu.ALU[CCoutput]->microcode.MICROCODE[CCinput],0);
	CLINK(registers.REGISTERS[output1]->bus.BUS1[input1],2);
	CLINK(registers.REGISTERS[output2]->bus.BUS2[input1],2);
	CLINK(bus.BUS1[output0]->d_memory.D_MEMORY[data_in],2);
	CLINK(bus.BUS1[output1]->Alu.ALU[input1],2);
	CLINK(bus.BUS2[output1]->d_memory.D_MEMORY[data_request],2);

	CLINK(bus.BUS2[output2]->Alu.ALU[input2],2);
	CLINK(bus.BUS2[output0]->mpx_add_reg.PC[input3],2);
	CLINK(mpx_add_reg.MPC[output1]->mpx_add_reg.MPC[input1],2);
	CLINK(mpx_add_reg.MPC[output2]->microcode.MICROCODE[from_mpc],2);
	CLINK(plus1.PC_plus1[output]->mpx_add_reg.PC[input2],2);
	CLINK(plus1.MPC_plus1[output]->mpx_add_reg.MPC[input2],2);

	CLINK(microcode.MICROCODE[to_mpc]->mpx_add_reg.MPC[input3],2);
	CLINK(microcode.MICROCODE[to_bus1]->bus.BUS1[input2],2);
	CLINK(microcode.MICROCODE[to_bus2]->bus.BUS2[input0],2);
	CLINK(microcode.MICROCODE[control1]->Alu.ALU[control_input],1);
	CLINK(microcode.MICROCODE[control2]->registers.REGISTERS[control_input],1);
	CLINK(microcode.MICROCODE[control3]->d_memory.D_MEMORY[control_input],1);
	CLINK(microcode.MICROCODE[control5]->mpx_add_reg.PC[control_input],1);
	CLINK(microcode.MICROCODE[control6]->mpx_add_reg.MPC[control_input],1);
)
)
